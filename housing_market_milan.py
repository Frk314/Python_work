# -*- coding: utf-8 -*-
"""Housing_Market_Milan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13g9PAjEIk-tMsTg47vjvy6hv7J9g-rtL

#Data Exploration of Housing Market in Milan
##**Title**: COVID-19: Continents in relation to time
##**Origin**: https://www.kaggle.com/code/michau96/covid-19-continents-in-relation-to-time/input
"""

pip install opendatasets

import opendatasets as od
import statistics as stat
import pandas as pd
import bokeh as bk
import seaborn as sns
import matplotlib.pyplot as mplt
import math

od.download("https://www.kaggle.com/datasets/tommasoramella/milano-housing-price/download?datasetVersionNumber=14")

data = pd.read_excel("/content/milano-housing-price/milano_housing_02_2_23.xlsx")

data.head()

"""###Basic informations about this dataset

"""

print("Number of elements: {}\n Number of columns: {}\n List of all columns: {}".format(len(data), len(data.columns), data.columns))
columns = data.columns
m = len(data)

"""###Let us search for any missing values"""

for i in columns:
  print("numbers of elements for {}: {}".format(i, len(data["{}".format(i)])))

"""###Visualisation

We will first extract some values that we deem more interesting for our analysis:
- room
- m2
- condominium expenses
- price
- year of build
- condition
- neibourghood
- car parking
- floor level
- heating_gas
- heating_radiator
- air_conditiong_centralized
- air_conditioning_heat

"""

useful_column = ["rooms","m2","condominium_expenses","price","year_of_build","condition","neighborhood","car_parking","floor_level","heating_gas","heating_radiator","air_conditiong_centralized","air_conditioning_heat"
]
data = data[useful_column]

"""###Let us make our Data more useful

First we will start with m2 and replace data "0" with the average for m2 and price
"""

Col = ["m2","price"]
for col in Col:
  sum = 0
  c = 0

  for i in data[col]:
    if not math.isnan(i):
      sum = sum + float(i)
      c = c+1

  avg = int(sum/c)

  data[col].fillna(avg, inplace=True)

"""Now we will replace all inconsistent value in condominium_expenses with the average"""

sum = 0
c = 0
data.loc[:, "condominium_expenses"] = pd.to_numeric(data["condominium_expenses"], errors='coerce')

for i in data["condominium_expenses"]:
  if not math.isnan(i):
    sum = sum + i
    c=c+1

avg = int(sum/c)
data["condominium_expenses"].fillna(avg, inplace=True)

"""Now we replace all inconsistent value in floor level with the mode"""

mode = stat.mode(data["floor_level"])

for i in range(len(data.floor_level)):
  if not data.floor_level[i] in ["0","1","2","3","4","5","6","7","8","9"]:
    data.loc[i, "floor_level"] = mode

"""now for the parking, we will use a boolean variable where "1" represents the presence of a parking lot and "0" the absence"""

nul = data.car_parking.isnull()
data.loc[nul, "car_parking"] = "No_parking"
for i in range(len(data.car_parking)):
  if data.car_parking[i] != "No_parking":
    data.loc[i, "car_parking"] = "parking"

"""####In m2, we remove the  and replace them with the 99th quantile

"""

#More exactly, we want to remove any value part of the 99th quantile because of the presence of ridiculously high values

extr_value = data.m2.quantile(0.99)
for i in range(m):
  if data["m2"][i] >= extr_value:
    data.loc[i, "m2"] = extr_value

print(data.condominium_expenses)

csv_file_path = 'output.csv'
data.to_csv(csv_file_path, index=False)

"""Now for the last one, we will replace all the nan in the other categorical values with a "no information"
"""

Col = ["condition","price", "year_of_build", "heating_gas","heating_radiator","air_conditiong_centralized","air_conditioning_heat"]

for col in Col:
  mode = stat.mode(data[col])
  data[col].fillna("no information", inplace=True)

"""###Let us print the relevant statistic for each of thoses columns"""

for col in useful_column:
  m = len(data)
  if type(data[col][13]) == str:  # Check if the first element in the column is a string
    mode = stat.mode(data[col])
    print("Mode:", mode)
  else:
    sum = 0
    for i in data[col]:
      if type(i) == float or type(i) == int:
        sum = sum + float(i)
      else:
        pass
    avg = sum/m
    print("Geometric mean: {:.3f}".format(avg))

print(data)

"""What does the price, condominium expenses and size distribution looks like?


"""

c = 0
columns = ["m2", "condominium_expenses", "price"]
num_plots = len(columns)


mplt.figure(figsize=(10, 12))  # Create one figure with adequate size

for i in columns:
    c += 1
    avg = stat.geometric_mean(data[i])
    #We limit the number plot to the 99th quantile to make it more visualy comprehensible
    extr_value = data[i].quantile(0.99)
    mplt.subplot(num_plots, 1, c)
    sns.scatterplot(x=range(len(data)), y=data[i], color="blue", alpha=0.6)
    sns.lineplot(x=range(len(data)), y=[avg]*len(data), color="red")
    mplt.title(f"{i} Repartition with Average")
    mplt.ylabel(i)
    mplt.ylim(0, extr_value)
    mplt.xlabel("Index")

mplt.tight_layout()  # Adjust subplots to fit in figure area.
mplt.show()

"""Repartition of the categorical variable   """

c = 0
columns = ["air_conditiong_centralized", "air_conditioning_heat"]
num_plots = len(columns)

sns.color_palette("bright")
mplt.figure(figsize=(12, 8))  # Create one figure with adequate size

for i in columns:
  c += 1

  mplt.subplot(num_plots, 2, c)
  sns.histplot(data[i], multiple="stack", color="#1b4d35")
  mplt.title(f"{i} Repartition")
  mplt.xticks(rotation=30, ha='right')
  mplt.xlabel(i)


mplt.tight_layout()# Adjust subplots to fit in figure area.
mplt.show()

c = 0
columns = ["condition","car_parking"]
num_plots = len(columns)


mplt.figure(figsize=(12, 8))  # Create one figure with adequate size

for i in columns:
  c += 1
  mplt.subplot(num_plots, 2, c)
  sns.histplot(data[i], color="#391b4d")
  mplt.title(f"{i} Repartition")
  mplt.xticks(rotation=30, ha='right')
  mplt.xlabel(i)


mplt.tight_layout()# Adjust subplots to fit in figure area.
mplt.show()

c = 0
columns = ["air_conditiong_centralized", "air_conditioning_heat"]
num_plots = len(columns)


mplt.figure(figsize=(12, 8))  # Create one figure with adequate size

for i in columns:
  c += 1
  mplt.subplot(num_plots, 2, c)
  sns.histplot(data[i])
  mplt.title(f"{i} Repartition")
  mplt.xticks(rotation=30, ha='right')
  mplt.xlabel(i)


mplt.tight_layout()# Adjust subplots to fit in figure area.
mplt.show()

"""Relation between:
- Price and number of rooms
"""

csv = data.to_csv("data.csv", index=False)

for i in data.rooms:
  if not str(i):
    print(i)

"""###Relation between the size of the room and the price"""

# Set up subplots
mplt.figure(figsize=(10, 8))

# Scatter plot
mplt.subplot(2, 1, 1)
sns.scatterplot(x=data.m2, y=data.price, color='blue', alpha=0.6)
mplt.xlabel('Size (m²)')
mplt.ylabel('Price')
mplt.xlim(0,300)
mplt.ylim(0,max(data.price))
mplt.title('Scatter plot of Price vs Size')
mplt.grid(True)

# Linear regression plot
mplt.subplot(2, 1, 2)
sns.regplot(x="m2", y="price", data=data, color='green', scatter_kws={'alpha':0.5})
mplt.xlabel('Size (m²)')
mplt.ylabel('Price')
mplt.xlim(0,300)
mplt.ylim(0,max(data.price))
mplt.title('Linear Regression Plot: Price vs Size')
mplt.grid(True)

# Adjust layout and display
mplt.tight_layout()
mplt.show()

"""###Relation between the size of the room and the condominium expenses"""

# Linear regression plot

sns.lmplot(x="m2", y="condominium_expenses", data=data, scatter_kws={'alpha':0.5})
mplt.xlabel('Size (m²)')
mplt.ylabel('Condominium Expenses')
mplt.xlim(0,300)
mplt.ylim(0,max(data.condominium_expenses))
mplt.title('Linear Regression Plot: Condominium expenses vs Size')
mplt.grid(True)

# Adjust layout and display
mplt.tight_layout()
mplt.show()

"""###How does car parking affect the price and the condominium expenses

---


"""

Col = ["price", "condominium_expenses"]
c = 1
for col in Col:
  mplt.figure(figsize=(6,8))
  mplt.subplot(2,1,c)

  summary = data.groupby('car_parking')[col].mean()
  sns.barplot(summary)
  mplt.title("Car Parking vs {}".format(col))
  mplt.xlabel(col)
  c = c+1

# Adjust layout and display
mplt.tight_layout()
mplt.show()

"""###Relation between the condition and the Price"""

Col = ["price", "condominium_expenses"]
c = 1
for col in Col:

  mplt.figure(figsize=(12,8))
  mplt.subplot(2,2,c)
  summary = data.groupby('condition')[col].mean()
  sns.barplot(summary)
  mplt.title("Car Parking vs {}".format(col))
  mplt.xticks(rotation=30, ha='right')
  mplt.xlabel(col)
  c += 1

# Adjust layout and display
mplt.tight_layout()
mplt.show()